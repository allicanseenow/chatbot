!function(e){var n={};function s(a){if(n[a])return n[a].exports;var t=n[a]={i:a,l:!1,exports:{}};return e[a].call(t.exports,t,t.exports,s),t.l=!0,t.exports}s.m=e,s.c=n,s.d=function(e,n,a){s.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:a})},s.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},s.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(n,"a",n),n},s.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},s.p="",s(s.s=6)}({6:function(e,n,s){"use strict";var a=io.connect("/chat_infra"),t=io.connect("/chat_com"),o=(RegExp("room=(.+?)(&|$)").exec(location.search)||[,null])[1];o&&a.on("name_been_set",function(e){a.emit("join_room",{roomName:o,userName:e.name}),a.on("user_entered",function(e){$("#messages").append('<div class="systemMessage">'+e.userName+" has joined the room "+e.roomName+".</div>")}),a.on("message",function(e){var n=JSON.parse(e);$("#messages").append('<div class="'+n.type+'">'+n.message+"</div>")}),t.on("message",function(e){var n=JSON.parse(e);n&&n.username&&$("#messages").append('<div class="'+n.type+'"><span class="name">'+n.username+":</span> "+n.message+"</div>")}),$("#nameform").hide(),$("#messages").append('<div class="systemMessage">Hello '+e.name+"</div>"),$("#send").click(function(){var n={message:$("#message").val(),type:"userMessage",name:e&&e.name};t.send(JSON.stringify(n)),$("#message").val("")})}),$(function(){$("#setname").click(function(){a.emit("set_name",{name:$("#nickname").val()})})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,